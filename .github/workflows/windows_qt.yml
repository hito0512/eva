permissions:
  contents: write # 打开写入权限

name: Windows
on: 
  # push代码时触发workflow
  push:
    branches: [ "main" ]
jobs:
  build:
    name: Build
    # 运行平台， windows-latest目前是windows server 2019
    runs-on: windows-latest
    strategy:
      # 矩阵配置
      matrix:
        qt_ver: [5.15.2]
        qt_target: [desktop]
        qt_arch: [win64_msvc2019_64]
        qt_arch_install: [msvc2019_64]

    # 步骤
    steps:
      - name: cacheQt
        id: WindowsCacheQt
        uses: actions/cache@v1
        with:
          path: D:/Qt/${{matrix.qt_ver}}/${{matrix.qt_arch_install}}
          key: ${{ runner.os }}-Qt/${{matrix.qt_ver}}/${{matrix.qt_arch}}
      # - name: setupQt
      #   # 检测是否已经缓存
      #   if: steps.WindowsCacheQt.outputs.cache-hit == 'true' 
      #   shell: pwsh
      #   env:
      #     QtPath: D:/Qt/${{matrix.qt_ver}}/${{matrix.qt_arch_install}}
      #   # 如果已经缓存了，则设置环境变量就行
      #   run: |
      #     $qt_Path=${env:QtPath}      
      #     echo "{Qt5_Dir::$qt_Path}={$qt_Path/bin}" >> "$GITHUB_ENV"

      # 安装Qt
      - name: Install 
        # 检测是否已经缓存
        if: steps.WindowsCacheQt.outputs.cache-hit != 'true'
        uses: jurplel/install-qt-action@v2
        with:
            version: ${{ matrix.qt_ver }} # 指定 Qt 版本
            host: 'windows'   # 主机系统
            target: ${{ matrix.qt_target }} # 目标平台
            arch: ${{ matrix.qt_arch }} # 架构和编译器
            dir: 'D:/'     # 安装目录
      # 拉取代码
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1